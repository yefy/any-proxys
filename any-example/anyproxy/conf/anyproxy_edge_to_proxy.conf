ebpf {
    data linux_raw = r```
        #打开ebpf编译日志
        debug_is_open_ebpf_log  = false
        is_open_ebpf = true
    ```r;
}

tunnel {
    data raw = r```
        is_open_tunnel = true
    ```r;
}

tunnel2 {
    data raw = r```
        #开启多少线程给tunnel2
        tunnel2_worker_thread  = 0  #default 0 (cpu num)
        #每个回源ip使用最大连接数
        tunnel2_max_connect  = 100  #default 100
        is_open_tunnel2 = false
    ```r;
}

common {
    reuseport linux_bool = true ;
}

socket {
    tcp raw = r```
        [[tcp]]
            #配置名字，可以根据名字来引用配置
            tcp_config_name = "tcp_config_ebpf"
            #发送buffer，为0不设置
            tcp_send_buffer = 16777216   #default 0  unset
            #接收buffer，为0不设置
            tcp_recv_buffer = 0 #default 0  unset
            #是否不延迟
            tcp_nodelay = false #default false
            #发送超时时间，为0不超时
            tcp_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            tcp_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            tcp_connect_timeout = 60  #default 60
    ```r;
    quic raw = r```
        [[quic]]
            #配置名字，可以根据名字来引用配置
            quic_config_name = "quic_config_default" #default quic_config_default
            #发送超时时间，为0不超时
            quic_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            quic_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            quic_connect_timeout = 60  #default 60
            #绑定端口,支持配置多端口"10001-10009,10010,10011,10012,10100-10110"
            quic_upstream_ports = "10001-10101" #default 不绑定固定端口， 使用的时候随机获取端口

            #quinn提供的配置值
            quic_default = true #default true   如果是true下面配置不生效
            quic_upstream_streams = 100 #default 100
            quic_send_window = 8 #default8
            quic_rtt = 100 #default 100
            quic_max_stream_bandwidth = 12500 #default 12500
            quic_enable_keylog = false #default false
            quic_protocols = "ALPN" #default "ALPN"
            quic_datagram_send_buffer_size = 1048576 #default 1024 * 1024
            quic_recv_buffer_size = 10485760 #default 10485760
            quic_send_buffer_size = 10485760 #default 10485760
    ```r;
}

include  str = ./anyproxy_edge_to_proxy_upstream.conf;

net {
    proxy_cache window_raw = r```
        is_open = true
        name = "proxy_cache_1"
        path = "C:/Users/yefy/Desktop/proxy_cache/proxy_cache_1"
        levels = "2:2"
        max_size = 0
    ```r;
    proxy_cache window_raw = r```
        is_open = true
        name = "proxy_cache_2"
        path = "C:/Users/yefy/Desktop/proxy_cache/proxy_cache_2"
        levels = "2:2"
        max_size = 0
    ```r;


    proxy_cache linux_raw = r```
        is_open = true
        name = "proxy_cache_1"
        path = "/root/Desktop/proxy_cache/proxy_cache_1"
        levels = "2:2"
        max_size = 0
    ```r;
    proxy_cache linux_raw = r```
        is_open = true
        name = "proxy_cache_2"
        path = "/root/Desktop/proxy_cache/proxy_cache_2"
        levels = "2:2"
        max_size = 0
    ```r;

    proxy_cache_name strs = proxy_cache_1 proxy_cache_2;
    proxy_request_slice usize = 3;
    proxy_cache_key str = "${http_request_method}${http_request_domain}${http_request_uri}";

    proxy_cache_methods strs = GET HEAD POST;
    proxy_cache_valid raw = r```
        [[proxy_cache_valid]]
        #status = ["500", "404", "any"]
        status = ["404"]
        time = 30
    ```r;

    proxy_expires_file_timer u64 = 30;
    proxy_max_open_file usize = 0;
    proxy_get_to_get_range bool = false;

    #层级：main|server|local
    #热点文件配置
    proxy_hot_file raw = r```
        #是否打开
        is_open = false
        #时间间隔统计一次
        hot_interval_time = 15
        #前面多少个是热点文件
        hot_top_count = 5
        #读取多少次，才能是热点文件, 暂时不支持
        hot_read_min_count = 10
        #磁盘io达到多少后,开始迁移热点文件
        hot_io_percent = 0
    ```r;

    stream_delay_mil_time u64 = 200;
    stream_nodelay_size usize = 8192;
    is_open_sendfile linux_bool= true;
    sendfile_max_write_size usize = 1048576;
    stream_nopush bool = true;
    #debug_is_open_stream_work_times bool = false;
    access raw = r```
        #如果没有配置就继承父类的配置
        [[access]]
            #default true
            access_log = true
            #default "./logs/access.log"
            access_log_file = "./logs/access.log"
            #default
            access_format = """[${local_time}] stream_max_write_time:${write_max_block_time_ms} buffer_cache:${buffer_cache} \
                upstream_balancer:${upstream_balancer} hello:${is_proxy_protocol_hello} ebpf:${is_open_ebpf} \
                sendfile:${open_sendfile} ${local_protocol} -> ${upstream_protocol} \
                request_id:[${request_id}] client_addr:${client_addr} remote_addr:${remote_addr} local_addr:${local_addr} upstream_addr:${upstream_addr} \
                domain:${domain} upstream_host:${upstream_host} ${status} ${status_str} timeout_exit:${is_timeout_exit} \
                session_time:${session_time} upstream_connect_time:${upstream_connect_time} \
                stream_bytes:${client_bytes_received} => ${upstream_bytes_sent}| ${upstream_bytes_received} => ${client_bytes_sent}:${http_hyper_client_bytes_sent} \
                http_stream_bytes:${http_body_client_bytes}:${http_body_upstream_bytes} |${http_header_client_bytes_received}:${http_body_client_bytes_received} => ${http_header_upstream_bytes_sent}:${http_body_upstream_bytes_sent}| \
                ${http_header_upstream_bytes_received}:${http_body_upstream_bytes_received} => ${http_header_client_bytes_sent}:${http_body_client_bytes_sent}:${http_hyper_client_bytes_sent} \
                ${upstream_curr_stream_size} ${upstream_max_stream_size} ${upstream_min_stream_cache_size} \
                client_protocol_hello_size:${client_protocol_hello_size} upstream_protocol_hello_size:${upstream_protocol_hello_size} \
                stream_work_times:[${stream_work_times}] stream_stream_info:[${stream_stream_info}] \
                http_local_cache_req_count:${http_local_cache_req_count} http_cache_status:${http_cache_status} \
                http_cache_file_status:${http_cache_file_status} http_is_upstream:${http_is_upstream} \
                http_last_slice_upstream_index:${http_last_slice_upstream_index} \
                http_max_upstream_count:${http_max_upstream_count} http_is_cache:${http_is_cache} \
                http_request_url:${http_request_method}@${http_request_url} http_cache_file_path:${http_cache_file_path}"""

            #default false
            access_log_stdout = true
            is_err_access_log = true
    ```r;


    wasm_http_filter_headers raw = r```
        [[wasm]]
        wasm_path = "../../wasm/http-filter-headers/target/wasm32-wasi/release/wasm_server.wasm"
        wasm_main_config = ""
    ```r;

    include  = ./anyproxy_edge_to_proxy_10m.conf;
    include  = ./anyproxy_edge_to_proxy_10m_tunnel.conf;
    include  = ./anyproxy_edge_to_proxy_limit.conf;
    include  = ./anyproxy_edge_to_proxy_sendfile.conf;
    include  = ./anyproxy_edge_to_proxy_sendfilelimit.conf;
    include  = ./anyproxy_edge_to_proxy_port.conf;
    include  = ./anyproxy_edge_to_proxy_domain.conf;
    include  = ./anyproxy_edge_to_proxy_ebpf.conf;
    include  = ./anyproxy_edge_to_proxy_http.conf;
    include  = ./anyproxy_edge_to_proxy_protocol.conf;
    include  = ./anyproxy_edge_to_proxy_websocket.conf;
    #include  = ./anyproxy_edge_to_proxy_wasm_http.conf;
    #include  = ./anyproxy_edge_to_proxy_wasm_websocket.conf;
}



r###
http:
curl http://www.example.cn:19090 -v
https:
curl https://www.example.cn:19091 -k -v
http2:
curl --http2-prior-knowledge http://www.example.cn:19092 -k -v
###r