ebpf {
    #内置toml格式扩展
    data raw = r```
        #打开ebpf编译日志
        debug_is_open_ebpf_log  = false
        #是否打开ebpf
        is_open_ebpf = false
    ```r;
}

tunnel {
    #内置toml格式扩展
    data raw = r```
        #是否打开tunnel协议回源
        is_open_tunnel = false
    ```r;
}

#这个模块性能差，已经废弃
tunnel2 {
    #内置toml格式扩展
    data raw = r```
        #开启多少线程给tunnel2
        tunnel2_worker_thread  = 0  #default 0 (cpu num)
        #每个回源ip使用最大连接数
        tunnel2_max_connect  = 100  #default 100
        #是否打开tunnel2协议回源
        is_open_tunnel2 = false
    ```r;
}

common {
    #绑定cpu
    cpu_affinity bool = false; #default false
    #linux下支持开启reuseport
    reuseport bool = false ;   #default false
    #线程个数，为0使用cpu数的线程
    worker_threads usize = 0;  #default 0 (cpu num)
    #最大链接
    max_connections i32 = 0;  #default 0  unlimit
    #reload和reinit等待流时间，时间到强制退出
    shutdown_timeout u64 = 30;    #default 30
    #最大打开文件
    max_open_file_limit u64 = 102400;  #default unlimit
    #linux memlock_rlimit
    memlock_rlimit_curr u64 = 1024000 ; #default unlimit
    memlock_rlimit_max u64 = 1024000 ; #default unlimit
    #线程池最大数量
    worker_threads_blocking usize = 512;
}

socket {
    #tcp服务监听和客户端请求设置配置
    #内置toml格式扩展
    tcp raw = r```
        [[tcp]]
            #配置名字，可以根据名字来引用配置
            tcp_config_name = "tcp_config_default" #default tcp_config_default
            #发送buffer，为0不设置
            tcp_send_buffer = 0   #default 0  unset
            #接收buffer，为0不设置
            tcp_recv_buffer = 0 #default 0  unset
            #是否不延迟
            tcp_nodelay = false #default false
            #发送超时时间，为0不超时
            tcp_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            tcp_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            tcp_connect_timeout = 60  #default 60
    ```r;
    #quic服务监听和客户端请求设置配置
    #内置toml格式扩展
    quic raw = r```
        [[quic]]
            #配置名字，可以根据名字来引用配置
            quic_config_name = "quic_config_default" #default quic_config_default
            #发送超时时间，为0不超时
            quic_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            quic_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            quic_connect_timeout = 60  #default 60
            #绑定端口,支持配置多端口"10001-10009,10010,10011,10012,10100-10110"
            quic_upstream_ports = "" #default 不绑定固定端口， 使用的时候随机获取端口

            #quinn提供的配置值
            quic_default = true #default true   如果是true下面配置不生效
            quic_upstream_streams = 100 #default 100
            quic_send_window = 8 #default8
            quic_rtt = 100 #default 100
            quic_max_stream_bandwidth = 12500 #default 12500
            quic_enable_keylog = false #default false
            quic_protocols = "ALPN" #default "ALPN"
            quic_datagram_send_buffer_size = 1048576 #default 1024 * 1024
            quic_recv_buffer_size = 10485760 #default 10485760
            quic_send_buffer_size = 10485760 #default 10485760
    ```r;
}

upstream {
    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_config1;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = weight;
        #balancer str = round_robin;
        #balancer str = random;
        #balancer str = ip_hash;
        #balancer str = ip_hash_active;
        #balancer str = fair;
        #tcp回源，内置toml格式扩展
        proxy_pass_tcp raw = r```
            #tcp回源地址
            address = "www.upstream.cn:11131"
            #心跳配置 interval：时间间隔， timeout：超时失败， fail：最大失败了，丢弃这个ip
            # http 为空走默认心跳， 如果配置了，强制走http请求，host取自address的，发起 HEAD http://www.upstream.cn:10203/1.txt
            #heartbeat = {interval = 10, timeout = 10, fail = 3, http = {port = 10203, uri = "/1.txt"}} #default 关闭
            #动态域名解析 interval：时间间隔
            #dynamic_domain = {interval = 10}  #default 关闭
            #是否开启protocol_hello携带更多数据给上游，仅支持内部服务使用
            is_proxy_protocol_hello = true
        ```r;
        #ssl回源，内置toml格式扩展
        proxy_pass_ssl raw = r```
            #ssl握手域名
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        #quic回源，内置toml格式扩展
        proxy_pass_quic raw = r```
            #quic握手域名
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        #tunnel_tcp回源，内置toml格式扩展
        proxy_pass_tunnel_tcp raw = r```
            #max_stream_size最大链接加速， min_stream_cache_size：最小保留多少socket缓存，channel_size：管道大小
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        #tunnel_ssl回源，内置toml格式扩展
        proxy_pass_tunnel_ssl raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        #tunnel_quic回源，内置toml格式扩展
        proxy_pass_tunnel_quic raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        #废弃
        proxy_pass_tunnel2_tcp raw = r```
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        #废弃
        proxy_pass_tunnel2_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        #废弃
        proxy_pass_tunnel2_quic raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
    }
}

net {
    #层级：main
    #内置toml格式扩展
    proxy_cache raw = r```
        #是否打开这个缓存
        is_open = true
        #缓存名字 由proxy_cache_name配置引用
        name = "proxy_cache_1"
        #缓存路径，建议一个磁盘一个路径
        path = "C:/Users/yefy/Desktop/proxy_cache/proxy_cache_1"
        #目录生成规则
        levels = "2:2"
        #最大缓存大小开启淘汰， 0 不淘汰
        max_size = 0
    ```r;
    proxy_cache raw = r```
        is_open = true
        name = "proxy_cache_2"
        path = "C:/Users/yefy/Desktop/proxy_cache/proxy_cache_2"
        levels = "2:2"
        max_size = 0
    ```r;

    #层级：main|server|local
    #引用几个缓存，存储规则是hash
    proxy_cache_name strs = proxy_cache_1 proxy_cache_2;

    #层级：main|server|local
    #回源请求切片大小，M为单位
    proxy_request_slice usize = 3;

    #层级：main|server|local
    #存储文件缓存key值， 支持预制变量
    proxy_cache_key str = "${http_ups_request_scheme}${http_ups_request_method}${http_ups_request_host}${http_ups_request_uri}";

    #层级：main|server|local
    #需要缓存的method: GET HEAD POST PUT DELETE PATCH OPTIONS
    proxy_cache_methods strs = GET HEAD POST;

    #层级：main|server|local
    #非200 206，的状态缓存
    proxy_cache_valid raw = r```
        [[proxy_cache_valid]]
        status = ["500", "404", "any"]
        time = 10
    ```r;

    #层级：local
    #uri 添加/purge开头， 开启proxy_cache_purge bool = true; 用于删除缓存文件
    proxy_cache_purge bool = true;


    #层级：main|server|local
    #过期文件定时删除, 单位秒
    proxy_expires_file_timer u64 = 10;

    #层级：main|server|local
    #get 强制使用 range回源
    proxy_get_to_get_range bool = false;


    #层级：main|server|local
    #静态服务器使用chunked发送
    transfer_encoding_chunked bool = false;


    #层级：main|server|local
    #热点文件配置
    proxy_hot_file raw = r```
        #是否打开
        is_open = false;
        #时间间隔统计一次
        hot_interval_time = 60;
        #前面多少个是热点文件
        hot_top_count = 10;
        #读取多少次，才能是热点文件, 暂时不支持
        hot_read_min_count = 10;
        #磁盘io达到多少后,开始迁移热点文件
        hot_io_percent = 70;
    ```r;

    #层级：main
    #最大缓存文件数量, 默认0 不限制
    proxy_max_open_file usize = 0;

     #层级：server local
     #重定向
     rewrite strs = ^(.*)/2.txt$ ${1}/1.txt redirect;
     rewrite strs = ^(.*)/4.txt$ ${1}/1.txt permanent;

    #层级：main|server|local
    #wasm_access 阶段添加webassembly热更新脚本，内置toml格式扩展
    wasm_access raw = r```
        [[wasm]]
        #webassembly脚本路径
        wasm_path = "../../../wasm/http-demo/target/wasm32-wasi/release/wasm_server.wasm"
        #webassembly main接口配置，由webassembly自己解析可以是toml， json， yaml等格式
        wasm_main_config = '''
            name = "wasm_access_test"
            '''
        #webassembly是否打开， 默认打开
        is_open = true
    ```r;

    #层级：main|server|local
    #wasm_serverless 阶段添加webassembly热更新脚本，内置toml格式扩展
    wasm_serverless raw = r```
        [[wasm]]
        wasm_path = "../../../wasm/serverless/target/wasm32-wasi/release/wasm_server.wasm"
        wasm_main_config = '''
            name = "wasm_serverless_test"
            '''
    ```r;

    #层级：main|server|local
    #wasm_access_log 阶段添加webassembly热更新脚本，内置toml格式扩展
    wasm_access_log raw = r```
        [[wasm]]
        wasm_path = "../../../wasm/http-demo/target/wasm32-wasi/release/wasm_server.wasm"
        wasm_main_config = '''
            name = "wasm_access_log_test"
            '''
    ```r;

    #层级：main|server|local
    #wasm_http_in_headers 阶段添加webassembly热更新脚本，内置toml格式扩展
    wasm_http_in_headers raw = r```
        [[wasm]]
        wasm_path = "../../../wasm/http-in-headers/target/wasm32-wasi/release/wasm_server.wasm"
        wasm_main_config = ""
    ```r;

    #层级：main|server|local
    #wasm_http_filter_headers_pre 阶段添加webassembly热更新脚本，内置toml格式扩展
    wasm_http_filter_headers_pre raw = r```
        [[wasm]]
        wasm_path = "../../../wasm/http-filter-headers-pre/target/wasm32-wasi/release/wasm_server.wasm"
        wasm_main_config = ""
        [[wasm]]
        wasm_path = "../../../wasm/http-filter-headers-pre-expire/target/wasm32-wasi/release/wasm_server.wasm"
        wasm_main_config =  '''
            expires = 0
            '''
    ```r;

    #层级：main|server|local
    #wasm_http_filter_headers 阶段添加webassembly热更新脚本，内置toml格式扩展
    wasm_http_filter_headers raw = r```
        [[wasm]]
        wasm_path = "../../../wasm/http-filter-headers/target/wasm32-wasi/release/wasm_server.wasm"
        wasm_main_config = ""
    ```r;

    #层级：main|server|local
    #http头添加Expires: Tue, 16 Apr 2024 15:49:10 GMT， Cache-Control: max-age=10
    expires usize = 0;

    #层级：main
    #启动阶段预先打开多少临时文件，提高性能
    tmp_file_cache_size usize = 100; #default 100

    #层级：main|server|local
    #流读取缓冲区大小
    stream_cache_size usize = 131072;  #default 131072

    #层级：main|server|local
    #打开上传流缓存模式
    is_upload_open_stream_cache bool = true; #default true

    #层级：main|server|local
    #打开下载流缓存模式
    is_download_open_stream_cache bool = true; #default true

    #层级：main|server|local
    #调试用 获取每个阶段运行时间
    debug_is_open_stream_work_times bool= true;   #default false

    #层级：main|server|local
    #调试用 定时打印access_log，为0不生效
    debug_print_access_log_time u64= 0;   #default 0

    #层级：main|server|local
    #调试用 定时打印流量
    debug_print_stream_flow_time u64= 0 ; #default 0

    #层级：main|server|local
    #临时文件缓存按照page页大小读写
    is_tmp_file_io_page bool= true;

    #层级：main|server|local
    #链接延迟多少时间在关闭， 单位是毫秒
    stream_so_singer_time usize= 0;  #default 0ms

    #层级：main|server|local
    #下载在这个范围内不限速，为0不生效
    download_limit_rate_after u64=0; #default 0   1024000

    #层级：main|server|local
    #下载限速多少，为0不生效
    download_limit_rate       u64=0; #default 0 102400 300000

    #层级：main|server|local
    #上传在这个范围内不限速，为0不生效
    upload_limit_rate_after u64=0; #default 0  1024000

    #层级：main|server|local
    #上传限速多少，为0不生效
    upload_limit_rate       u64=0; #default 0 102400 300000

    #层级：main|server|local
    #下载临时文件最大值，为0文件可以无限大
    download_tmp_file_size u64= 10240000 ;#default 0  10240000

    #层级：main|server|local
    #上传临时文件最大值，为0文件可以无限大
    upload_tmp_file_size u64= 10240000; #default 0

    #层级：main|server|local
    #下载临时文件最大值，达到最大值就重新在打开，防止文件过大， 为0文件可以无限大
    download_tmp_file_reopen_size u64= 0 ;#default 0

    #层级：main|server|local
    #上传临时文件最大值，达到最大值就重新在打开，防止文件过大， 为0文件可以无限大
    upload_tmp_file_reopen_size u64= 0; #default 0

    #层级：main|server|local
    #是否开启带特定key值的日志
    debug_is_open_print bool= false;

    #层级：main|server|local
    #linux 是否打开零复制sendfile
    is_open_sendfile bool= false;

    #层级：main|server|local
    #linux sendfile一次最大写入多少字节
    sendfile_max_write_size usize = 0;

    #层级：main|server|local
    #回源是否开启protocol_hello携带更多信息给上游
    is_proxy_protocol_hello bool = false;

    #层级：main|server|local
    #是否开启ebpf加速，仅四层代理可用
    is_open_ebpf bool = false;

    #层级：main|server|local
    #多线程是否共享http客户端回源池
    is_disable_share_http_context bool = false;

    #层级：main|server|local
    #流一次尝试读取多少page的字节大小
    read_buffer_page_size usize = 8;

    #层级：main|server|local
    #流一次尝试写入多少page的字节大小
    write_buffer_page_size usize = 16;

    #层级：main|server|local
    #四层代理port模式，是否开启ebpf直连， 直连开启不会多tcp流做任何读操作
    is_port_direct_ebpf bool = false;

    #层级：main|server|local
    #四层代理ebpf发送给客户端超时时间
    client_timeout_mil_time_ebpf u64 = 120000;

    #层级：main|server|local
    #四层代理ebpf发送给源站超时时间
    upstream_timeout_mil_time_ebpf u64 = 2000;


    #层级：main|server|local
    #流关闭类型：fast 快速关闭，shutdown 调用流的shutdown函数关闭
    close_type str = "fast";

    #层级：main|server|local
    #流delay时间，可以减少内存复杂和系统调用，但是会增加延迟
    stream_delay_mil_time u64 = 0;

    #层级：main|server|local
    #发送多少字节的流后， stream_delay_mil_time开始生效
    stream_nodelay_size usize = 8192;

    #层级：main|server|local
    #在sendfile情况是否开启tcp nopush配置
    stream_nopush bool = false;

    #层级：main|server|local
    #缓存文件多大后开启directio标识，仅在linux平台有效
    directio u64 = 0;

    #层级：main|server|local
    #access_log 日志，内置toml格式扩展
    access raw = r```
        #如果没有配置就继承父类的配置
        [[access]]
            #是否打开 #default true
            access_log = true
            #文件路径    default "./logs/access.log"
            access_log_file = "./logs/access.log"
            #支持预制变量
            access_format = """[${local_time}] stream_max_write_time:${write_max_block_time_ms} buffer_cache:${buffer_cache} \
                upstream_balancer:${upstream_balancer} hello:${is_proxy_protocol_hello} ebpf:${is_open_ebpf} \
                sendfile:${open_sendfile} ${local_protocol} -> ${upstream_protocol} \
                request_id:[${request_id}] client_addr:${client_addr} remote_addr:${remote_addr} local_addr:${local_addr} upstream_addr:${upstream_addr} \
                domain:${domain} upstream_host:${upstream_host} ${status} ${status_str} timeout_exit:${is_timeout_exit} \
                session_time:${session_time} upstream_connect_time:${upstream_connect_time} \
                stream_bytes:${client_bytes_received} ${upstream_bytes_sent} ${upstream_bytes_received} ${client_bytes_sent} \
                ${upstream_curr_stream_size} ${upstream_max_stream_size} ${upstream_min_stream_cache_size} \
                client_protocol_hello_size:${client_protocol_hello_size} upstream_protocol_hello_size:${upstream_protocol_hello_size} \
                stream_work_times:[${stream_work_times}] stream_stream_info:[${stream_stream_info}] \
                http_local_cache_req_count:${http_local_cache_req_count} http_cache_status:${http_cache_status} \
                http_cache_file_status:${http_cache_file_status} http_is_upstream:${http_is_upstream} \
                http_last_slice_upstream_index:${http_last_slice_upstream_index} \
                http_max_upstream_count:${http_max_upstream_count} http_is_cache:${http_is_cache} \
                http_request_url:${http_request_method}@${http_request_url} http_cache_file_path:${http_cache_file_path}"""

            #是否打印到屏幕，调试用， default false
            access_log_stdout = false
            #是否只是打印错误日志， default true
            is_err_access_log = true
    ```r;

    server {
        #层级：server
        #引用socket模块哪个tcp名字的配置值
        tcp_config_name str = "";

        #层级：server
        #引用socket模块哪个quic名字的配置值
        quic_config_name str = "";


        #层级：server
        #当前匹配域名值
        domain str = "www.example.cn";

        #层级：server
        #domain模式下，域名到http协议解析获取, 必须配置在监听配置前面，内置toml格式扩展
        domain_from_http_v1 raw = r```
                #是否打开
                is_open = true
                #限制协议method值， true通过， false拒接
                [check_methods]
                get = true
                post = true
                put = true
                delete = true
                patch = true
                head = true
                options = true
                purge = true
        ```r;


        #层级：server
        #四层代理，port模式监听tcp协议，内置toml格式扩展
        port_listen_tcp raw = r```
            address = "0.0.0.0:11231"
        ```r;

        #层级：server
        #四层代理，port模式监听ssl协议，内置toml格式扩展
        port_listen_ssl raw = r```
            address = "0.0.0.0:11232"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;

        #层级：server
        #四层代理，port模式监听quic协议，内置toml格式扩展
        port_listen_quic raw = r```
            address = "0.0.0.0:11231"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;

        #层级：server
        #四层代理，domain模式监听tcp协议，内置toml格式扩展
        domain_listen_tcp raw = r```
            address = "0.0.0.0:11251"
        ```r;

        #层级：server
        #四层代理，domain模式监听ssl协议，内置toml格式扩展
        domain_listen_ssl raw = r```
            address = "0.0.0.0:11252"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;

        #层级：server
        #四层代理，domain模式监听quic协议，内置toml格式扩展
        domain_listen_quic raw = r```
            address = "0.0.0.0:11251"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;



        #层级：server
        #domain模式，开启http支持，调试用，内置toml格式扩展
        net_server_http raw = r```
        ```r;

        #层级：server
        #domain模式，开启websocket支持，调试用，内置toml格式扩展
        net_server_websocket raw = r```
        ```r;


        #层级：local
        #domain模式，开启http支持，调试用，内置toml格式扩展
        net_server_http_echo raw = r```
            body = "\nhello\n"
        ```r;

        #层级：local
        #domain模式，开启http静态服务，内置toml格式扩展
        net_server_http_static raw = r```
            path = "C:/Users/yefy/Desktop/yefy/tools/nginx/nginx-1.18.0/html"
        ```r;

        #层级：local
        #domain模式，开启http反向代理服务，内置toml格式扩展
        net_server_http_proxy raw = r```
            proxy_pass = {version = "http1.1"}
        ```r;


        #层级：local
        #domain模式，开启websocke支持，调试用，内置toml格式扩展
        net_server_websocket_echo raw = r```
            body = "\nhello\n"
        ```r;


        #层级：local
        #domain模式，开启websocke支持，调试用，内置toml格式扩展
        net_server_websocket_static raw = r```
            path = "C:/Users/yefy/Desktop/yefy/tools/nginx/nginx-1.18.0/html"
        ```r;


        #层级：local
        #domain模式，开启websocke反向代理服务，内置toml格式扩展
        net_server_websocket_proxy raw = r```
        ```r;


        #local可以配置多个
        local {
            #层级：local
            #匹配规则，filter配置data值，就进入这个local， 内置toml格式扩展
            rule raw = r```
                [[rule]]
                #支持预制变量
                data= "${http_request_url}"
                #支持字符串http /path, 支持正则表达式，$$开头标识后续是正则表达式：$$(.*)
                filter = "http"
                [[rule]]
                 data= "${http_request_uri}"
                 filter = "/test"
            ```r;
        }

        local {
            rule raw = r```
                [[rule]]
                data= "${http_request_url}"
                filter = "https"
            ```r;
        }


        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;

            #层级：local
            #tcp协议回源，， 内置toml格式扩展
            proxy_pass_tcp raw = r```
                address = "www.upstream.cn:11131"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #层级：local
            #ssl协议回源，， 内置toml格式扩展
            proxy_pass_ssl raw = r```
                ssl_domain= "www.example.cn"
                address = "www.upstream.cn:11132"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #层级：local
            #quic协议回源，， 内置toml格式扩展
            proxy_pass_quic raw = r```
                ssl_domain= "www.example.cn"
                address = "www.upstream.cn:11131"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #层级：local
            #tunnel_tcp协议回源，， 内置toml格式扩展
            proxy_pass_tunnel_tcp raw = r```
                tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
                address = "www.upstream.cn:11131"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #层级：local
            #tunnel_ssl协议回源，， 内置toml格式扩展
            proxy_pass_tunnel_ssl raw = r```
                tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
                ssl_domain= "www.example.cn"
                address = "www.upstream.cn:11132"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #层级：local
            #tunnel_quic协议回源，， 内置toml格式扩展
            proxy_pass_tunnel_quic raw = r```
                tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
                ssl_domain= "www.example.cn"
                address = "www.upstream.cn:11131"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #废弃
            proxy_pass_tunnel2_tcp raw = r```
                address = "www.upstream.cn:11131"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #废弃
            proxy_pass_tunnel2_ssl raw = r```
                ssl_domain= "www.example.cn"
                address = "www.upstream.cn:11132"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #废弃
            proxy_pass_tunnel2_quic raw = r```
                ssl_domain= "www.example.cn"
                address = "www.upstream.cn:11131"
                #heartbeat = {interval = 10, timeout = 10, fail = 3}
                #dynamic_domain = {interval = 10}
                is_proxy_protocol_hello = true
            ```r;

            #层级：local
            #upstream模块找到名字是upstream_config1的配置回源
            proxy_pass_upstream str = "upstream_config1";
        }
    }
}