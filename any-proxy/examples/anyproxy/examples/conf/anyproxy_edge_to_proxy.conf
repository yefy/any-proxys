ebpf {
    data linux_raw = r```
        #打开ebpf编译日志
        debug_is_open_ebpf_log  = false
        is_open_ebpf = true
    ```r;
}

tunnel {
    data raw = r```
        is_open_tunnel = true
    ```r;
}

tunnel2 {
    data raw = r```
        #开启多少线程给tunnel2
        tunnel2_worker_thread  = 0  #default 0 (cpu num)
        #每个回源ip使用最大连接数
        tunnel2_max_connect  = 100  #default 100
        is_open_tunnel2 = false
    ```r;
}

common {
    reuseport linux_bool = true ;
}

socket {
    tcp raw = r```
        [[tcp]]
            #配置名字，可以根据名字来引用配置
            tcp_config_name = "tcp_config_ebpf"
            #发送buffer，为0不设置
            tcp_send_buffer = 16777216   #default 0  unset
            #接收buffer，为0不设置
            tcp_recv_buffer = 873800 #default 0  unset
            #是否不延迟
            tcp_nodelay = true #default true
            #发送超时时间，为0不超时
            tcp_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            tcp_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            tcp_connect_timeout = 60  #default 10
    ```r;
}

include  str = ./anyproxy_edge_to_proxy_upstream.conf;

http {
    debug_is_open_stream_work_times bool = false;
    access raw = r```
        #如果没有配置就继承父类的配置
        [[access]]
            #default true
            access_log = false
            #default "./logs/access.log"
            access_log_file = "./logs/access.log"
            #default
            access_format = "[${local_time}] ${total_read_size} ${total_write_size} ${write_max_block_time_ms} ${buffer_cache} ${upstream_dispatch} ${is_proxy_protocol_hello} ${is_open_ebpf} ${open_sendfile} ${local_protocol} -> ${upstream_protocol} ${request_id} ${client_addr} ${remote_addr} ${local_addr} ${upstream_addr} ${domain} ${upstream_host} ${status} ${status_str} ${is_timeout_exit} ${session_time} ${upstream_connect_time} ${client_bytes_received} ${upstream_bytes_sent} ${upstream_bytes_received} ${client_bytes_sent} ${upstream_curr_stream_size} ${upstream_max_stream_size} ${upstream_min_stream_cache_size} [${stream_work_times}]"
            #default false
            access_log_stdout = false
    ```r;


    include  = ./anyproxy_edge_to_proxy_10m.conf;
    include  = ./anyproxy_edge_to_proxy_limit.conf;
    include  = ./anyproxy_edge_to_proxy_sendfile.conf;
    include  = ./anyproxy_edge_to_proxy_sendfilelimit.conf;
    include  = ./anyproxy_edge_to_proxy_port.conf;
    include  = ./anyproxy_edge_to_proxy_domain.conf;
    include  = ./anyproxy_edge_to_proxy_ebpf.conf;
    include  = ./anyproxy_edge_to_proxy_http.conf;

#tcp
    server {
        stream_cache_size  usize = 131072;
        is_upload_open_stream_cache bool = true;
        is_download_open_stream_cache bool = true;
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:20005"
        ```r;
        proxy_pass_upstream str = "upstream15";
        local {
        }
    }
#tcptunnel
    server {
        stream_cache_size  usize = 131072;
        is_upload_open_stream_cache bool = true;
        is_download_open_stream_cache bool = true;
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:20006"
        ```r;
        proxy_pass_upstream str = "upstream14";
        local {
        }
    }

r###
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" http://www.example.cn:20401
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" https://www.example.cn:20402
###r
    server {
        domain str = "www.example.cn";
        http_server_proxy_websocket raw = r```
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:20401"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:20402"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        proxy_pass_upstream str = "upstream10";
        local {
        }
    }
}



r###
http:
curl http://www.example.cn:19090 -v
https:
curl https://www.example.cn:19091 -k -v
http2:
curl --http2-prior-knowledge http://www.example.cn:19092 -k -v
###r