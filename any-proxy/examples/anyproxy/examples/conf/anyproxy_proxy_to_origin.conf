ebpf {
    data linux_raw = r```
        #打开ebpf编译日志
        debug_is_open_ebpf_log  = false
        is_open_ebpf = true
    ```r;
}

tunnel {
    data raw = r```
        is_open_tunnel = true
    ```r;
}

tunnel2 {
    data raw = r```
        #开启多少线程给tunnel2
        tunnel2_worker_thread  = 0  #default 0 (cpu num)
        #每个回源ip使用最大连接数
        tunnel2_max_connect  = 100  #default 100
        is_open_tunnel2 = false
    ```r;
}

common {
    reuseport linux_bool = true ;
}

socket {
}

upstream {
    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_tcp_http;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19090"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_tcp_https;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19091"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_ssl_https;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19091"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_http_http;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19090"
        ```r;

        proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19091"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_http_http2;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19092"
        ```r;
         proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19093"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_http_websocket;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19490"
        ```r;
         proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19491"
        ```r;
    }
}

http {
    debug_is_open_stream_work_times bool = true;
    access raw = r```
        #如果没有配置就继承父类的配置
        [[access]]
            #default true
            access_log = true
            #default "./logs/access.log"
            access_log_file = "./logs/access.log"
            #default
            access_format = "[${local_time}] ${total_read_size} ${total_write_size} ${write_max_block_time_ms} ${buffer_cache} ${upstream_dispatch} ${is_proxy_protocol_hello} ${is_open_ebpf} ${open_sendfile} ${local_protocol} -> ${upstream_protocol} ${request_id} ${client_addr} ${remote_addr} ${local_addr} ${upstream_addr} ${domain} ${upstream_host} ${status} ${status_str} ${is_timeout_exit} ${session_time} ${upstream_connect_time} ${client_bytes_received} ${upstream_bytes_sent} ${upstream_bytes_received} ${client_bytes_sent} ${upstream_curr_stream_size} ${upstream_max_stream_size} ${upstream_min_stream_cache_size} [${stream_work_times}]"
            #default false
            access_log_stdout = true
    ```r;

#upstream1
#http->tcp, tcp->http
#curl http://www.example.cn:10001 -k -v
    server {
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10001"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10011"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10011"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        proxy_pass_upstream str = "upstream_tcp_http";
        local {
        }
    }
#upstream2
#https->tcp, tcp->https
#curl https://www.example.cn:10002 -k -v
    server {
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10002"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10012"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10012"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        proxy_pass_upstream str = "upstream_tcp_https";
        local {
        }
    }
#upstream3
#https->ssl, http->http
#curl https://www.example.cn:10003 -k -v
    server {
        port_listen_tcp raw = r```
            address = "0.0.0.0:10013"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10003"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10003"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        proxy_pass_upstream str = "upstream_tcp_http";
        local {
        }
    }
#upstream4
#https->ssl, http->https
#curl https://www.example.cn:10004 -k -v
    server {
        port_listen_tcp raw = r```
            address = "0.0.0.0:10014"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10004"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10004"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        proxy_pass_upstream str = "upstream_ssl_https";
        local {
        }
    }

#upstream5
#https->tcp, https->https
#curl https://www.example.cn:10101 -k -v
    server {
        domain str = "www.example.cn";
         domain_listen_tcp raw = r```
            address = "0.0.0.0:10101"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10111"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10111"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        proxy_pass_upstream str = "upstream_tcp_https";
        local {
        }
    }
#upstream6
#https->ssl, http->http
#curl https://www.example.cn:10102 -k -v
    server {
        domain str = "www.example.cn";
        domain_listen_tcp raw = r```
            address = "0.0.0.0:10112"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10102"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10102"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        proxy_pass_upstream str = "upstream_tcp_http";
        local {
        }
    }
#upstream7
#https->ssl, http->https
#curl https://www.example.cn:10103 -k -v
    server {
        domain str = "www.example.cn";
        domain_listen_tcp raw = r```
            address = "0.0.0.0:10113"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10103"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10103"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        proxy_pass_upstream str = "upstream_ssl_https";
        local {
        }
    }
#upstream8
#http(http1.0 http1.1 http2.0)->http, http->(http1.1,https1.1)
#curl http://www.example.cn:10201 -k -v

#https(https1.0 https1.1 https2.0)->https, http->(http1.1,https1.1)
#curl https://www.example.cn:10202 -k -v
    server {
        domain str = "www.example.cn";
        http_server_proxy raw = r```
            #version: http1.1 http2.0 auto
            proxy_pass = {version = "http1.1"}
        ```r;
         domain_listen_tcp raw = r```
            address = "0.0.0.0:10201"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10202"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10202"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        proxy_pass_upstream str = "upstream_http_http";
        local {
        }
    }

#upstream9
#http(http1.0 http1.1 http2.0)->http, http->(http2.0,https2.0)
#curl http://www.example.cn:10301 -k -v

#https(https1.0 https1.1 https2.0)->https, http->(http2.0,https2.0)
#curl https://www.example.cn:10302 -k -v
    server {
        domain str = "www.example.cn";
        http_server_proxy raw = r```
            #version: http1.1 http2.0 auto
            proxy_pass = {version = "http2.0"}
        ```r;
         domain_listen_tcp raw = r```
            address = "0.0.0.0:10301"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10302"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10302"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        proxy_pass_upstream str = "upstream_http_http2";
        local {
        }
    }

#upstream10
r###
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" http://www.example.cn:10401
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" https://www.example.cn:10402
###r
    server {
        domain str = "www.example.cn";
        http_server_proxy_websocket raw = r```
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:10401"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10402"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10402"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        proxy_pass_upstream str = "upstream_http_websocket";
        local {
        }
    }

#upstream11
#http->tcp, tcp->http
#curl http://www.example.cn:10501 -k -v
    server {
        is_open_ebpf linux_bool = true;
        is_port_direct_ebpf linux_bool = true;
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10501"
        ```r;
        proxy_pass_upstream str = "upstream_tcp_http";
        local {
        }
    }

#upstream12
#http->tcp, tcp->http
#curl http://www.example.cn:10005 -k -v
    server {
        upload_limit_rate      u64=102400; #default 0 102400 300000
        download_limit_rate       u64=102400; #default 0 102400 300000
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10005"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10015"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10015"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        proxy_pass_upstream str = "upstream_tcp_http";
        local {
        }
    }
#upstream13 upstream14  upstream15
#http->tcp, tcp->http
#curl http://www.example.cn:10006 -k -v
    server {
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10006"
        ```r;
        proxy_pass_upstream str = "upstream_tcp_http";
        local {
        }
    }
}



r###
http:
curl http://www.example.cn:19090 -v
https:
curl https://www.example.cn:19091 -k -v
http2:
curl --http2-prior-knowledge http://www.example.cn:19092 -k -v
###r