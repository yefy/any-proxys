ebpf {
    data raw = r```
        #打开ebpf编译日志
        debug_is_open_ebpf_log  = false
        is_open_ebpf = false
    ```r;
}

tunnel {
    data raw = r```
        is_open_tunnel = false
    ```r;
}

tunnel2 {
    data raw = r```
        #开启多少线程给tunnel2
        tunnel2_worker_thread  = 0  #default 0 (cpu num)
        #每个回源ip使用最大连接数
        tunnel2_max_connect  = 100  #default 100
        is_open_tunnel2 = false
    ```r;
}

common {
    #绑定cpu
    cpu_affinity bool = false; #default false
    #linux下支持开启reuseport
    reuseport bool = false ;   #default false
    #线程个数，为0使用cpu数的线程
    worker_threads usize = 0;  #default 0 (cpu num)
    #最大链接
    max_connections i32 = 0;  #default 0   unlimit
    #reload和reinit等待流时间，时间到强制退出
    shutdown_timeout u64 = 30;    #default 30
    #最大打开文件
    max_open_file_limit u64 = 102400;  #default unlimit
    #linux memlock_rlimit
    memlock_rlimit_curr u64 = 1024000 ; #default unlimit
    memlock_rlimit_max u64 = 1024000 ; #default unlimit
    #线程池最大数量
    worker_threads_blocking usize = 512;
}

socket {
    tcp raw = r```
        [[tcp]]
            #配置名字，可以根据名字来引用配置
            tcp_name = "tcp_config1" #default tcp_config1
            #发送buffer，为0不设置
            tcp_send_buffer = 0   #default 0  unset
            #接收buffer，为0不设置
            tcp_recv_buffer = 0 #default 0  unset
            #是否不延迟
            tcp_nodelay = true #default true
            #发送超时时间，为0不超时
            tcp_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            tcp_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            tcp_connect_timeout = 60  #default 10
    ```r;
    quic raw = r```
        [[quic]]
            #配置名字，可以根据名字来引用配置
            quic_name = "quic_config1" #default quic_config1
            #发送超时时间，为0不超时
            quic_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            quic_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            quic_connect_timeout = 60  #default 10
            #绑定端口,支持配置多端口"10001-10009,10010,10011,10012,10100-10110"
            quic_upstream_ports = "" #default 不绑定固定端口， 使用的时候随机获取端口

            #quinn提供的配置值
            quic_default = true #default true   如果是true下面配置不生效
            quic_upstream_streams = 100 #default 100
            quic_send_window = 8 #default8
            quic_rtt = 100 #default 100
            quic_max_stream_bandwidth = 12500 #default 12500
            quic_enable_keylog = false #default false
            quic_protocols = "ALPN" #default "ALPN"
            quic_datagram_send_buffer_size = 1048576 #default 1024 * 1024
            quic_recv_buffer_size = 10485760 #default 10485760
            quic_send_buffer_size = 10485760 #default 10485760
    ```r;
}

upstream {
    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_config1;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = weight;
        balancer str = round_robin;
        balancer str = random;
        balancer str = ip_hash;
        balancer str = ip_hash_active;
        #balancer str = fair;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_quic raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel_tcp raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel_ssl raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel_quic raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel2_tcp raw = r```
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel2_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel2_quic raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
    }
}

http {
    #流读取缓冲区大小
    stream_cache_size usize = 131072;  #default 131072
    is_open_stream_cache_merge bool = true; #default true
    open_stream_cache_merge_mil_time u64 = 100; #default 100
    is_upload_open_stream_cache bool = false; #default false
    is_download_open_stream_cache bool = false; #default false
    #调试用 获取每个阶段时间
    debug_is_open_stream_work_times bool= true;   #default false
    #调试用 定时打印access_log，为0不生效
    debug_print_access_log_time u64= 0;   #default 0
    #调试用 定时打印流量
    debug_print_stream_flow_time u64= 0 ; #default 0
    is_tmp_file_io_page bool= true;
    stream_so_singer_time usize= 0;  #default 0ms
    #下载在这个范围内不限速，为0不生效
    download_limit_rate_after u64=0; #default 0   1024000
    #限速多少，为0不生效
    download_limit_rate       u64=0; #default 0 102400 300000
    #上传在这个范围内不限速，为0不生效
    upload_limit_rate_after u64=0; #default 0  1024000
    #限速多少，为0不生效
    upload_limit_rate       u64=0; #default 0 102400 300000
    #下载临时文件最大值，为0不生效
    download_tmp_file_size u64= 10240000 ;#default 0  10240000
    #上传临时文件最大值，为0不生效
    upload_tmp_file_size u64= 10240000; #default 0
    #是否开启带特定key值的日志
    debug_is_open_print bool= false;
    #linux 是否打开零复制sendfile
    is_open_sendfile bool= false;
    tcp_conf_name str = "";
    quic_conf_name str = "";
    is_proxy_protocol_hello bool = false;
    is_open_ebpf bool = false;
    is_disable_share_http_context bool = false;
    read_buffer_size usize = 2;
    is_port_direct_ebpf bool = false;
    access raw = r```
        #如果没有配置就继承父类的配置
        [[access]]
            #default true
            access_log = false
            #default "./logs/access.log"
            access_log_file = "./logs/access.log"
            #default
            access_format = "[${local_time}] ${total_read_size} ${total_write_size} ${write_max_block_time_ms} ${buffer_cache} ${upstream_dispatch} ${is_proxy_protocol_hello} ${is_open_ebpf} ${open_sendfile} ${local_protocol} -> ${upstream_protocol} ${request_id} ${client_addr} ${remote_addr} ${local_addr} ${upstream_addr} ${domain} ${upstream_host} ${status} ${status_str} ${is_timeout_exit} ${session_time} ${upstream_connect_time} ${client_bytes_received} ${upstream_bytes_sent} ${upstream_bytes_received} ${client_bytes_sent} ${upstream_curr_stream_size} ${upstream_max_stream_size} ${upstream_min_stream_cache_size} [${stream_work_times}]"
            #default false
            access_log_stdout = false
    ```r;
    server {
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:11231"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:11232"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:11231"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
r###
        domain_listen_tcp raw = r```
            address = "0.0.0.0:11251"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:11252"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:11251"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        ###r
        http_server_echo raw = r```
            body = "\nhello\n"
        ```r;
        http_server_static raw = r```
            path = "C:/Users/yefy/Desktop/yefy/tools/nginx/nginx-1.18.0/html"
        ```r;
        http_server_proxy raw = r```
            proxy_pass = {version = "http1.1"}
        ```r;
        http_server_proxy_websocket raw = r```
        ```r;
        http_server_echo_websocket raw = r```
            body = "\nhello\n"
        ```r;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        r###
        proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_quic raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel_tcp raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel_ssl raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel_quic raw = r```
            tunnel = { max_stream_size = 5, min_stream_cache_size = 50, channel_size = 64}
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel2_tcp raw = r```
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel2_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11132"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_tunnel2_quic raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:11131"
            #heartbeat = {interval = 10, timeout = 10, fail = 3}
            #dynamic_domain = {interval = 10}
            is_proxy_protocol_hello = true
        ```r;
        proxy_pass_upstream str = "upstream_config1";
###r
        local {
        }
    }
}