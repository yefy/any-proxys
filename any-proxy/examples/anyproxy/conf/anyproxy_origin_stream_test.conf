r###
ebpf {
    data linux_raw = r```
        #打开ebpf编译日志
        debug_is_open_ebpf_log  = false
        is_open_ebpf = true
    ```r;
}

tunnel {
    data raw = r```
        is_open_tunnel = false
    ```r;
}

tunnel2 {
    data raw = r```
        #开启多少线程给tunnel2
        tunnel2_worker_thread  = 0  #default 0 (cpu num)
        #每个回源ip使用最大连接数
        tunnel2_max_connect  = 100  #default 100
        is_open_tunnel2 = false
    ```r;
}
###r
common {
    reuseport linux_bool = true ;
}

socket {
}

upstream {
}

net {
    stream_delay_mil_time u64 = 200;
    stream_nodelay_size usize = 8192;
    is_open_sendfile linux_bool= true;
    sendfile_max_write_size usize = 0;
    stream_nopush bool = true;
    #debug_is_open_stream_work_times bool = false;
    access raw = r```
        #如果没有配置就继承父类的配置
        [[access]]
            #default true
            access_log = true
            #default "./logs/access.log"
            access_log_file = "./logs/access.log"
            #default
            access_format = """[${local_time}] stream_max_write_time:${write_max_block_time_ms} buffer_cache:${buffer_cache} \
                upstream_balancer:${upstream_balancer} hello:${is_proxy_protocol_hello} ebpf:${is_open_ebpf} \
                sendfile:${open_sendfile} ${local_protocol} -> ${upstream_protocol} \
                request_id:[${request_id}] client_addr:${client_addr} remote_addr:${remote_addr} local_addr:${local_addr} upstream_addr:${upstream_addr} \
                domain:${domain} upstream_host:${upstream_host} ${status} ${status_str} timeout_exit:${is_timeout_exit} \
                session_time:${session_time} upstream_connect_time:${upstream_connect_time} \
                stream_bytes:${client_bytes_received} ${upstream_bytes_sent} ${upstream_bytes_received} ${client_bytes_sent} \
                ${upstream_curr_stream_size} ${upstream_max_stream_size} ${upstream_min_stream_cache_size} \
                client_protocol_hello_size:${client_protocol_hello_size} upstream_protocol_hello_size:${upstream_protocol_hello_size} \
                stream_work_times:[${stream_work_times}] stream_stream_info:[${stream_stream_info}] \
                http_local_cache_req_count:${http_local_cache_req_count} http_cache_status:${http_cache_status} \
                http_cache_file_status:${http_cache_file_status} http_is_upstream:${http_is_upstream} \
                http_last_slice_upstream_index:${http_last_slice_upstream_index} \
                http_max_upstream_count:${http_max_upstream_count} http_is_cache:${http_is_cache}"""

            #default false
            access_log_stdout = true
            is_err_access_log = true
    ```r;

    server {
        domain str = "www.example.cn";
         net_server_stream_test raw = r```
#file_name = "/root/Desktop/proxy_cache/proxy_cache_1/f4/42/3a75b99d0f5cbe20dabe7006844642f4"

file_name = "/root/Desktop/proxy_cache/proxy_cache_2/f4/42/3a75b99d0f5cbe20dabe7006844642f4"

#file_name = "/root/Desktop/fdisk/nginx/nginx-1.18.0/nginx/html/5g"

            is_open_sendfile = true
            tcp_nopush = true
            sendfile_max_write_size = 1048576
            sendfile_sleep_mil_time = 0

            buffer_len = 65536
            is_directio = false
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:30090"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:30091"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:30092"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:30093"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
        }
    }

    server {
        domain str = "www.example.cn";
        net_server_echo_http raw = r```
            body = "\nhello\n"
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:30290"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:30291"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:30292"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:30293"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
        }
    }

    server {
        domain str = "www.example.cn";
        net_server_echo_websocket raw = r```
            body = "\nhello\n"
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:30390"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:30391"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
        }
    }

    server {
        domain str = "www.example.cn";
        net_server_static_websocket window_raw = r```
            path = "C:/Users/yefy/Desktop/yefy/tools/nginx/nginx-1.18.0/html"
        ```r;
        net_server_static_websocket linux_raw = r```
            path = "/root/Desktop/fdisk/nginx/nginx-1.18.0/nginx/html"
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:30490"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:30491"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
        }
    }
}


r###
http:
curl http://www.example.cn:30090 -k -v
https:
curl https://www.example.cn:30091 -k -v
http2:
curl --http2-prior-knowledge http://www.example.cn:30092 -k -v
https2:
curl --http2-prior-knowledge https://www.example.cn:30093 -k -v
###r


r###
http:
curl http://www.example.cn:30290 -k -v
https:
curl https://www.example.cn:30291 -k -v
http2:
curl --http2-prior-knowledge http://www.example.cn:30292 -k -v
https2:
curl --http2-prior-knowledge https://www.example.cn:30293 -k -v
###r

r###
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" http://www.example.cn:30390
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" https://www.example.cn:30391
###r

r###
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" http://www.example.cn:30490
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" https://www.example.cn:30491
###r