ebpf {
    data linux_raw = r```
        #打开ebpf编译日志
        debug_is_open_ebpf_log  = false
        is_open_ebpf = true
    ```r;
}

tunnel {
    data raw = r```
        is_open_tunnel = true
    ```r;
}

tunnel2 {
    data raw = r```
        #开启多少线程给tunnel2
        tunnel2_worker_thread  = 0  #default 0 (cpu num)
        #每个回源ip使用最大连接数
        tunnel2_max_connect  = 100  #default 100
        is_open_tunnel2 = false
    ```r;
}

common {
    reuseport linux_bool = true ;
}

socket {
    tcp raw = r```
        [[tcp]]
            #配置名字，可以根据名字来引用配置
            tcp_config_name = "tcp_config_ebpf"
            #发送buffer，为0不设置
            tcp_send_buffer = 16777216   #default 0  unset
            #接收buffer，为0不设置
            tcp_recv_buffer = 0 #default 0  unset
            #是否不延迟
            tcp_nodelay = false #default false
            #发送超时时间，为0不超时
            tcp_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            tcp_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            tcp_connect_timeout = 60  #default 60
    ```r;
    quic raw = r```
        [[quic]]
            #配置名字，可以根据名字来引用配置
            quic_config_name = "quic_config_default" #default quic_config_default
            #发送超时时间，为0不超时
            quic_send_timeout = 60  #default 60
            #接收超时时间，为0不超时
            quic_recv_timeout = 60  #default 60
            #connect超时时间，为0不超时
            quic_connect_timeout = 60  #default 60
            #绑定端口,支持配置多端口"10001-10009,10010,10011,10012,10100-10110"
            quic_upstream_ports = "11001-11101" #default 不绑定固定端口， 使用的时候随机获取端口

            #quinn提供的配置值
            quic_default = true #default true   如果是true下面配置不生效
            quic_upstream_streams = 100 #default 100
            quic_send_window = 8 #default8
            quic_rtt = 100 #default 100
            quic_max_stream_bandwidth = 12500 #default 12500
            quic_enable_keylog = false #default false
            quic_protocols = "ALPN" #default "ALPN"
            quic_datagram_send_buffer_size = 1048576 #default 1024 * 1024
            quic_recv_buffer_size = 10485760 #default 10485760
            quic_send_buffer_size = 10485760 #default 10485760
    ```r;
}

upstream {
    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_tcp_http;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19090"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_tcp_http_ebpf;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            tcp_config_name = "tcp_config_ebpf"
            address = "www.upstream.cn:19090"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_tcp_https;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19091"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_ssl_https;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19091"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_http_http;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19090"
        ```r;

        proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19091"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_http_http2;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19092"
        ```r;
         proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19093"
        ```r;
    }

    server {
        #配置名字，可以根据名字来引用配置
        name str = upstream_http_websocket;
        #负载均衡 weight round_robin random ip_hash ip_hash_active fair
        balancer str = random;
        proxy_pass_tcp raw = r```
            address = "www.upstream.cn:19490"
        ```r;
         proxy_pass_ssl raw = r```
            ssl_domain= "www.example.cn"
            address = "www.upstream.cn:19491"
        ```r;
    }
}

net {
r###
    proxy_cache window_raw = r```
        is_open = true
        name = "proxy_cache_1"
        path = "C:/Users/yefy/Desktop/proxy_cache/proxy_cache_1"
        levels = "2:2"
        max_size = 0
    ```r;
    proxy_cache window_raw = r```
        is_open = true
        name = "proxy_cache_2"
        path = "C:/Users/yefy/Desktop/proxy_cache/proxy_cache_2"
        levels = "2:2"
        max_size = 0
    ```r;

    proxy_cache linux_raw = r```
        is_open = true
        name = "proxy_cache_1"
        path = "/root/Desktop/proxy_cache/proxy_cache_1"
        levels = "2:2"
        max_size = 0
    ```r;
    proxy_cache linux_raw = r```
        is_open = true
        name = "proxy_cache_2"
        path = "/root/Desktop/proxy_cache/proxy_cache_2"
        levels = "2:2"
        max_size = 0
    ```r;
    proxy_cache_name strs = proxy_cache_1 proxy_cache_2;
    proxy_request_slice usize = 3;
    proxy_cache_key str = "${http_ups_request_scheme}${http_ups_request_method}${http_ups_request_host}${http_ups_request_uri}";
###r

    stream_delay_mil_time u64 = 200;
    stream_nodelay_size usize = 8192;
    is_open_sendfile linux_bool= true;
    sendfile_max_write_size usize = 1048576;
    stream_nopush bool = true;
    #debug_is_open_stream_work_times bool = false;
    access raw = r```
        #如果没有配置就继承父类的配置
        [[access]]
            #default true
            access_log = true
            #default "./logs/access.log"
            access_log_file = "./logs/access.log"
            #default
            access_format = """[${local_time}] stream_max_write_time:${write_max_block_time_ms} buffer_cache:${buffer_cache} \
                upstream_balancer:${upstream_balancer} hello:${is_proxy_protocol_hello} ebpf:${is_open_ebpf} \
                sendfile:${open_sendfile} ${local_protocol} -> ${upstream_protocol} \
                request_id:[${request_id}] client_addr:${client_addr} remote_addr:${remote_addr} local_addr:${local_addr} upstream_addr:${upstream_addr} \
                domain:${domain} upstream_host:${upstream_host} ${status} ${status_str} timeout_exit:${is_timeout_exit} \
                session_time:${session_time} upstream_connect_time:${upstream_connect_time} \
                stream_bytes:${client_bytes_received} ${upstream_bytes_sent} ${upstream_bytes_received} ${client_bytes_sent} \
                ${upstream_curr_stream_size} ${upstream_max_stream_size} ${upstream_min_stream_cache_size} \
                client_protocol_hello_size:${client_protocol_hello_size} upstream_protocol_hello_size:${upstream_protocol_hello_size} \
                stream_work_times:[${stream_work_times}] stream_stream_info:[${stream_stream_info}] \
                http_local_cache_req_count:${http_local_cache_req_count} http_cache_status:${http_cache_status} \
                http_cache_file_status:${http_cache_file_status} http_is_upstream:${http_is_upstream} \
                http_last_slice_upstream_index:${http_last_slice_upstream_index} \
                http_max_upstream_count:${http_max_upstream_count} http_is_cache:${http_is_cache}"""

            #default false
            access_log_stdout = true
            is_err_access_log = true
    ```r;

#upstream1
#http->tcp, tcp->http
#curl http://www.example.cn:10001 -k -v
    server {
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10001"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10011"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10011"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http";
        }
    }
#upstream2
#https->tcp, tcp->https
#curl https://www.example.cn:10002 -k -v
    server {
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10002"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10012"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10012"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_https";
        }
    }
#upstream3
#https->ssl, http->http
#curl https://www.example.cn:10003 -k -v
    server {
        port_listen_tcp raw = r```
            address = "0.0.0.0:10013"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10003"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10003"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http";
        }
    }
#upstream4
#https->ssl, http->https
#curl https://www.example.cn:10004 -k -v
    server {
        port_listen_tcp raw = r```
            address = "0.0.0.0:10014"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10004"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10004"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_ssl_https";
        }
    }

#upstream5
#https->tcp, https->https
#curl https://www.example.cn:10101 -k -v
    server {
        domain str = "www.example.cn";
         domain_listen_tcp raw = r```
            address = "0.0.0.0:10101"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10111"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10111"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_https";
        }
    }
#upstream6
#https->ssl, http->http
#curl https://www.example.cn:10102 -k -v
    server {
        domain str = "www.example.cn";
        domain_listen_tcp raw = r```
            address = "0.0.0.0:10112"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10102"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10102"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http";
        }
    }
#upstream7
#https->ssl, http->https
#curl https://www.example.cn:10103 -k -v
    server {
        domain str = "www.example.cn";
        domain_listen_tcp raw = r```
            address = "0.0.0.0:10113"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10103"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10103"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_ssl_https";
        }
    }
#upstream8
#http(http1.0 http1.1 http2.0)->http, http->(http1.1,https1.1)
#curl http://www.example.cn:10201 -k -v

#https(https1.0 https1.1 https2.0)->https, http->(http1.1,https1.1)
#curl https://www.example.cn:10202 -k -v
    server {
        domain str = "www.example.cn";
        net_server_proxy_http raw = r```
            #version: http1.1 http2.0 auto
            proxy_pass = {version = "http1.1"}
        ```r;
         domain_listen_tcp raw = r```
            address = "0.0.0.0:10201"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10202"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10202"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_http_http";
        }
    }

#upstream9
#http(http1.0 http1.1 http2.0)->http, http->(http2.0,https2.0)
#curl http://www.example.cn:10301 -k -v

#https(https1.0 https1.1 https2.0)->https, http->(http2.0,https2.0)
#curl https://www.example.cn:10302 -k -v
    server {
        domain str = "www.example.cn";
        net_server_proxy_http raw = r```
            #version: http1.1 http2.0 auto
            proxy_pass = {version = "http2.0"}
        ```r;
         domain_listen_tcp raw = r```
            address = "0.0.0.0:10301"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10302"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10302"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_http_http2";
        }
    }

#upstream10
r###
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" http://www.example.cn:10401
curl -vk -H "host:www.example.cn" -H "Upgrade: websocket" -H "Sec-WebSocket-Version: 13" -H "Sec-WebSocket-Key:13" -H "Connection: Upgrade" https://www.example.cn:10402
###r
    server {
        domain str = "www.example.cn";
        net_server_proxy_websocket raw = r```
        ```r;
        domain_listen_tcp raw = r```
            address = "0.0.0.0:10401"
        ```r;
        domain_listen_ssl raw = r```
            address = "0.0.0.0:10402"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        domain_listen_quic raw = r```
            address = "0.0.0.0:10402"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_http_websocket";
        }
    }

#upstream11
#http->tcp, tcp->http
#curl http://www.example.cn:10501 -k -v
    server {
        #debug_is_open_stream_work_times bool = false;
        tcp_config_name str = "tcp_config_ebpf";
        is_open_ebpf linux_bool = true;
        is_port_direct_ebpf linux_bool = true;
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10501"
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http_ebpf";
        }
    }
#upstream11_1
#http->tcp, tcp->http
#curl http://www.example.cn:10502 -k -v
    server {
        #debug_is_open_stream_work_times bool = false;
        tcp_config_name str = "tcp_config_ebpf";
        is_open_ebpf linux_bool = true;
        is_port_direct_ebpf linux_bool = false;
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10502"
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http_ebpf";
        }
    }

#upstream12
#http->tcp, tcp->http
#curl http://www.example.cn:10005 -k -v
    server {
        #upload_limit_rate      u64=102400; #default 0 102400 300000
        #download_limit_rate       u64=102400; #default 0 102400 300000
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10005"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10015"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10015"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http";
        }
    }

    #upstream13
    #http->tcp, tcp->http
    #curl http://www.example.cn:10008 -k -v
        server {
            stream_nopush bool = true;
            stream_cache_size  usize = 131072;
            is_open_sendfile linux_bool= true;
            is_upload_open_stream_cache bool = true;
            is_download_open_stream_cache bool = true;
            upload_limit_rate      u64=3024000; #default 0 102400 300000
            download_limit_rate       u64=3024000; #default 0 102400 300000
            download_tmp_file_size  u64= 10240000 ;#default 0  10240000
            upload_tmp_file_size  u64= 10240000; #default 0
            domain str = "www.example.cn";
            port_listen_tcp raw = r```
                address = "0.0.0.0:10008"
            ```r;
            local {
                rule raw = r```
                    [[rule]]
                    data= ""
                    filter = "$$(.*)"
                ```r;
                proxy_pass_upstream str = "upstream_tcp_http";
            }
        }

#upstream13_1
    #http->tcp, tcp->http
    #curl http://www.example.cn:10009 -k -v
        server {
            stream_nopush bool = true;
            stream_cache_size  usize = 131072;
            is_open_sendfile linux_bool= true;
            is_upload_open_stream_cache bool = true;
            is_download_open_stream_cache bool = true;
            download_tmp_file_size  u64= 10240000 ;#default 0  10240000
            upload_tmp_file_size  u64= 10240000; #default 0
            domain str = "www.example.cn";
            port_listen_tcp raw = r```
                address = "0.0.0.0:10009"
            ```r;
            local {
                rule raw = r```
                    [[rule]]
                    data= ""
                    filter = "$$(.*)"
                ```r;
                proxy_pass_upstream str = "upstream_tcp_http";
            }
        }

#upstream14  upstream15
#http->tcp, tcp->http
#curl http://www.example.cn:10006 -k -v
    server {
        stream_cache_size  usize = 131072;
        is_upload_open_stream_cache bool = true;
        is_download_open_stream_cache bool = true;
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10006"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10016"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10006"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http";
        }
    }

    server {
        is_upload_open_stream_cache bool = false;
        is_download_open_stream_cache bool = false;
        domain str = "www.example.cn";
        port_listen_tcp raw = r```
            address = "0.0.0.0:10007"
        ```r;
        port_listen_ssl raw = r```
            address = "0.0.0.0:10017"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        port_listen_quic raw = r```
            address = "0.0.0.0:10007"
            ssl = {key = "./cert/www.example.cn.key.pem", cert = "./cert/www.example.cn.cert.pem", ssl_domain = "www.example.cn"}
        ```r;
        local {
            rule raw = r```
                [[rule]]
                data= ""
                filter = "$$(.*)"
            ```r;
            proxy_pass_upstream str = "upstream_tcp_http";
        }
    }
}



r###
http:
curl http://www.example.cn:19090 -v
https:
curl https://www.example.cn:19091 -k -v
http2:
curl --http2-prior-knowledge http://www.example.cn:19092 -k -v
###r