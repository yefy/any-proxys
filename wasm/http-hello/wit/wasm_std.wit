interface wasm-std {
    use wasm-http.{response, request};
    enum error {
        //继续进行
        ok,
        //结束当前循环
        break,
        //结束所有循环
        finish,
        //错误退出请求
        error,
        //退出请求
        return,
        ext1,
        ext2,
        ext3,
    }
    //版本信息
    anyproxy-version: func() -> result<string, string>;
    //获取预制变量值
    variable: func(key: string) -> result<option<string>, string>;
    //异步sleep函数
    sleep: func(time-ms: u64);
    //当前插件在主服务的唯一id，简称session_id, 也是session_send函数参数
    main-session-id: func() -> u64;
    curr-session-id: func() -> u64;
    //当前链接在主服务的唯一id，简称fd，可以读取客户端流信息
    main-fd: func() -> u64;
    //生成唯一session_id
    new-session-id: func() -> u64;
    //用于插件之间通讯， 根据session_id发送到哪个插件
    session-send: func(session-id: u64, cmd: s64, value: list<u8>) -> result<_, string>;
    session-request: func(session-id: u64, cmd: s64, value: list<u8>) -> result<option<list<u8>>, string>;
    //插件接收信息
    session-recv: func() -> result<tuple<u64, s64, list<u8>>, string>;
    session-try-recv: func() -> result<option<tuple<u64, s64, list<u8>>>, string>;
    //插件响应信息
    session-response: func(fd: u64, value: option<list<u8>>) -> result<_, string>;
    //增加定时器
    add-timer: func(time-ms: u64, cmd: s64, value: list<u8>);
    //删除定时器
    del-timer: func(cmd: s64);
    //获取过期定时器
    get-timer-timeout:func(time-ms: u64) -> list<tuple<s64, list<u8>>>;

    in-add-headers: func(headers: list<tuple<string, string>>) -> result<_, string>;
    in-add-header: func(key: string, value: string) -> result<_, string>;
    in-del-headers: func(headers: list<string>) -> result<_, string>;
    in-del-header: func(key: string) -> result<_, string>;
    in-is-header: func(key: string) -> result<bool, string>;
    in-get-header: func(key: string) -> result<option<string>, string>;
    in-get-request: func() -> result<request, string>;
    in-body-read-exact: func() -> result<list<u8>, string>;

    out-add-headers: func(headers: list<tuple<string, string>>) -> result<_, string>;
    out-add-header: func(key: string, value: string) -> result<_, string>;
    out-del-headers: func(headers: list<string>) -> result<_, string>;
    out-del-header: func(key: string) -> result<_, string>;
    out-is-header: func(key: string) -> result<bool, string>;
    out-get-header: func(key: string) -> result<option<string>, string>;
    out-set-response: func(res: response) -> result<_, string>;
    out-response: func(res: response) -> result<_, string>;

    spawn: func(typ: option<s64>, config: option<string>) -> result<u64, string>;
}